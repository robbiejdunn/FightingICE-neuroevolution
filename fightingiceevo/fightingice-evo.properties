# File describing AHNI properties for the evolution of an agent in the FightingICE game framework.

# comment below to use seed based on time
random.seed=123456

run.name=fightingice-evo
run.reset=true

###########
# EVOLUTION
###########

# number of evolutions to run
num.runs=1
# number of generations per evolution run
num.generations=3000
# number of individuals in population
popul.size=200

# true = only one topological mutation can occur per individual
# false = mutation probabilities applied to all possible mutation points
topology.mutation.classic=true

# mutation rate for a neuron replacing an existing connection
add.neuron.mutation.rate=0.25
# mutation rate for adding a neuron anywhere in the network. topology.mutation.classic must be false
#add.neuron.anywhere.mutation.rate=0.25

add.connection.mutation.rate=0.4
remove.connection.mutation.rate=0.02
# only remove weights from network with magnitude smaller than this
remove.connection.max.weight=1

# should be 1.0
prune.mutation.rate=1.0

weight.mutation.rate=0.1
weight.mutation.std.dev=1.0
# amount to perturb weights by when generating initial population
weight.mutation.std.dev.initial=1.0

# percentage of individuals used as parents
survival.rate=0.3
# proportion of sexual (crossover) vs asexual reproduction
crossover.proportion=0.4
# probability that individual created with crossover operator will be candidate for mutation
crossover.mutate.probability=0

#[1, 5] (min number in population for elitism to be used?)
selector.elitism.min.specie.size=5
#percent of individuals from each species copied to next generation unchanged
selector.elitism.proportion=0.0
#min number to select from a species (if it has size >=  selector.elitism.min.specie.size)
selector.elitism.min.to.select=1
selector.roulette=false
selector.speciated.fitness=true
# The maximum number of generations a species can exist for without fitness improvement
# (unless it's the only species or it's the fittest and selector.max.stagnant.maintainfittest=true)
selector.max.stagnant.generations=15
selector.max.stagnant.maintainfittest=true

############
# speciation
############
#species distance factors
#c1, excess genes factor [1.0, 2.0]
chrom.compat.excess.coeff=2.0
#c2, disjoint genes factor [1.0, 2.0]
chrom.compat.disjoint.coeff=2.0
#c3, Weight difference factor [0.2, 3.0]
chrom.compat.common.coeff=1.0

#compatability threshold [0.1, 4.0], relative to c#
speciation.threshold=2.0
speciation.target=15
speciation.threshold.change=0.1


##################
# fitness function
##################
#The fully qualified class name (ie including packages) that will be used to evaluate fitness
fitness_function.class=com.ojcoleman.ahni.experiments.fightingiceevo.TestFF
#max threads to use for fitness evaluation (including transcription of genotype/cppn to phenotype/substrate)
#if value is <= 0 then the detected number of processor cores will be used
fitness.max_threads=1

fitness.hyperneat.scale.factor=2
fitness.hyperneat.scale.times=0
fitness.hyperneat.scale.performance=0.98
fitness.hyperneat.scale.recordintermediateperformance=true

################
# CPPN/AnjiNet #
################
#input and output size determined by hyperneat settings
stimulus.size=7
response.size=7
# The type of activation function to use in the CPPN, "random" means a function will be randomly picked.
initial.topology.activation=random
initial.topology.fully.connected=true
initial.topology.num.hidden.neurons=0
initial.topology.activation.input=linear
initial.topology.activation.output=linear
# The activation function types that may be added to the CPPN if initial.topology.activation=random.
initial.topology.activation.random.allowed=sigmoid, gaussian, sine, absolute
# The probability weight of each function in initial.topology.activation.random.allowed being selected.
#initial.topology.activation.random.probabilities=1.0, 1.0, 1.0, 1.0
recurrent=disallowed
recurrent.cycles=1
#[1, 500]
weight.max=50
weight.min=-50


#####################
# HyperNEAT/GridNet #
#####################
#The class that will perform the transcription from a chromosome/individual describing a CPPN to the substrate network.
ann.transcriber.class=com.ojcoleman.ahni.transcriber.HyperNEATTranscriberGridNet
#The activation function to use for neurons in the substrate network. Typically "sigmoid". See com.anji.nn.activationfunction.ActivationFunctionFactory
ann.hyperneat.activation.function=sigmoid
#Set to true to restrict the substrate network to a strictly feed-forward topology.
ann.hyperneat.feedforward=true
#For recurrent networks, the number of activation cycles to perform each time the substrate network is presented with new input and queried for its output.
#ann.hyperneat.cyclesperstep=4  not required for feed forward
#Enable bias connections in the substrate network.
ann.hyperneat.enablebias=true
#If true indicates that the CPPN should receive the delta value for each axis between the source and target neuron coordinates
ann.hyperneat.includedelta=true
#If true indicates that the CPPN should receive the angle in the XY plane between the source and target neuron coordinates (relative to the line X axis).
ann.hyperneat.includeangle=false
#If true indicates that instead of using a separate output from the CPPN to specify weight values for each weight layer in a feed-forward network, the layer coordinate is input to the CPPN and only a single output from CPPN is used to specify weight values for all weight layers.
ann.hyperneat.useinputlayerencoding=false

#The minimum CPPN output required to produce a non-zero weight in the substrate network.
ann.hyperneat.connection.expression.threshold=0.2
# If true use the Link Expression Output enhancement instead of a threshold (ie instead of ann.hyperneat.connection.expression.threshold)
ann.hyperneat.leo=false
# Enable or disable seeding of the initial population of CPPNs to incorporate a bias towards local connections via the Link Expression Output (LEO). Default is "false".
ann.hyperneat.leo.localityseeding=false

#Limits the incoming connections to a target neuron to include those from source neurons within the specified range of the target neuron. Set this to -1 to disable it.
ann.hyperneat.connection.range=-1
#Minimum and maximum weight values in the substrate network.
ann.transcriber.connection.weight.min=-1
ann.transcriber.connection.weight.max=1

#The number of layers in the substrate network.
ann.hyperneat.depth=2
#The height and width of each layer in the network, including input and output layers and starting with the input layer.
ann.hyperneat.height=2, 2
ann.hyperneat.width=2, 2

# The coordinate range of neurons in the substrate in each dimension. This is
# used to determine the input to the CPPN for a given substrate neuron location.
# Defaults to "0, 1".
ann.hyperneat.range.x=0, 1
ann.hyperneat.range.y=0, 1
# Inputs are at z=0, outputs at z=1.
ann.hyperneat.range.z=0, 1 

#############
# PERSISTENCE
#############

persistence.class=com.anji.persistence.FilePersistence
persistence.base.dir=./db
persist.enable=true
persist.all=false
persist.champions=true
persist.last=false
persist.load.genotype=false
id.file=./db/id.xml
neat.id.file=./db/neatid.xml

##############
# PRESENTATION
##############

presentation.generate=false
presentation.dir=./nevt

#########
# logging
#########
# How often to produce a line in the log containing a brief summary of the current progress.
log.pergenerations=1

# FileAppenders with the name RunLog receive special treatment: for each run the output will be directed to a file
# with the name specified by log4j.appender.RunLog.File in the directory [output.dir]/[run number]/
log4j.rootLogger=INFO, C
log4j.appender.C=org.apache.log4j.ConsoleAppender
#log4j.appender.F=org.apache.log4j.FileAppender
#log4j.appender.F=org.apache.log4j.RollingFileAppender
#log4j.appender.F.File=/home/data/ai/unsw/project/software/anji/log/or3.log
#log4j.appender.F.MaxFileSize=10MB
#log4j.appender.F.MaxBackupIndex=20
log4j.appender.C.layout=org.apache.log4j.PatternLayout
#log4j.appender.F.layout=org.apache.log4j.PatternLayout
log4j.appender.C.layout.ConversionPattern=%-5p %m%x%n
#log4j.appender.F.layout.ConversionPattern=%-5p %m%x%n

################
# other output #
################
# Where to store output files produced by the experiment.
output.dir=../fightingice-evo
# Whether to log the champ to a text file and/or image. N < 0 indicates no logging, N=0 indicates
# only at the end of evolution, N > 0 indicates every N generations and after evolution has finished.
log.champ.tostring=25
log.champ.toimage=25
log.champ.evaluation=25